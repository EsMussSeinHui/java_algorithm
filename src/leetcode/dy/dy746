package leetcode.dy;

/**
 * @Author: hui
 * @Date: 2019/3/15 22:30
 */

class Solution {
        public int minCostClimbingStairs(int[] cost) {
            int now1=cost[0];
            int now2=cost[1];
            int now=0;
            for(int i=2;i<cost.length;i++)
            {
                if(now1<now2)
                    now=now1+cost[i];
                else
                    now=now2+cost[i];
                now1=now2;
                now2=now;
            }

            return now1>now2?now2:now1;

        }
}
/*太菜了，多思考 从顶到下，和从下至顶 ，究竟哪一个更加合适
 static int [] dp=new int[1010];
    public int minCostClimbingStairs(int[] cost) {
        Arrays.fill(dp,-1);
        int ans=dfs(cost.length,cost);
        return ans;

    }

    static int dfs(int n,int [] cost)
    {
        if(n==0) return 0;
        if(n==1) return 0;
        if(dp[n]!=-1) return dp[n];
        dp[n]=Math.min(dfs(n-1,cost)+cost[n-1],dfs(n-2,cost)+cost[n-2]);
        return dp[n];
    }
*/

