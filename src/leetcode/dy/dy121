class Solution {
    public int maxProfit(int[] prices) {
      if(prices.length==0)
          return 0;
      int ans=0;
      int min=prices[0];
        for(int i=1;i<prices.length;i++)
        {
            if(prices[i]<min)
                min=prices[i];
            else
            {
                ans=Math.max(ans,prices[i]-min);
            }

        }
        return ans;
    }
}

/*太慢了，这边的动态规划 都应该仔细想想，都有特殊的方法可以加快
class Solution {
    public int maxProfit(int[] prices) {
      int ans=0;
        for(int i=1;i<prices.length;i++)
        {
            for(int j=0;j<i;j++)
            {
                if(prices[i]-prices[j]>ans)
                    ans=prices[i]-prices[j];
            }
        }
        return ans;
    }
}
*/