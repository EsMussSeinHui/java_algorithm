动态规划

需要最优子结构 和 重叠子问题
递推写法、递归写法

很多都是双循环，而不是单循环的原因是为什么呢

思考方向：
1、是否有以下6种典型类似
2、重叠子问题思索很重要  再找最优子结构
3、边界问题，自顶向下和自底向上
4、理解状态的无后效性
5、设计状态转移方程
   主要还有dp的存储设计
   循环时变量的含义

2、最大连续子序列和   A1,An
    思考方向    单循环即可                                   dp[1]
    n未知，求n等于求n-1，重叠子问题。n=1,dp[1]=A1. n=2,dp[2]=A1|A1+A2 . n=3  dp[3]=A3|dp[2]+A3
    再去遍历dp 寻找max
    dp[i]=max{A[i],dp[i-1]+A[i]}


3、最长不下降子序列（LIS）
    思考方向   双循环
    又不知道在什么时候结束，求n=求n-1。
    dp[i]=max{1,dp[j]+1}  //j为嵌套循环变量

问题来了，dp取到的值到底是什么。怎么去理解dp数组中的数值 像最大连续子序列和，n表明的是取 n的话，m-n 的max
                                                           LIS也是
这个最优解是可以存贮在n还是不能存储在n

但是LCS存储却不是这样，比较特殊的是，或者说取最优的策略不同  这样说比较合适
主要还是状态转移方程、和dp数组存储的问题，就是涉及到无后效性时，dp应该取什么。

4、最长公共子序列（LCS）
                 dp[i-1][j-1]+1   A[i]==B[j]
    dp[i][j]= max{dp[i-1][j],dp[i][j-1]}  A[i]!=B[j]

5、最长回文子串
   最明显的特征是边界设定，以及dp[i][j] 的设计， i j 表示 从 i 到 j 的是否为回文子串
   这边dp存储的时候就是一个状态 1，或者 0 ，结果是由 设定 循环时L来进行存储，dp 中没有答案。
   当然一定要在dp中放答案也行吧。

   主要还是一个边界和最小子问题吧。 以及循环时变量的含义

6、DAG最长路(最不认真的看的一块..)
    DAG 有向无环图。
    算了，下次看图论补吧。


7、背包问题
    这个很典型啊，之前还遇到一个货币问题，就是完全背包问题。虽然没有了价值属性，但是尝试做还是做出来了。
    但是状态转移方程和完全背包还是有点区别 默认dp[v]=1元*n  dp[v]=max(dp[v],dp[v-j]+dp[j])
	但是主要循环思想差不多。
	0、1背包问题 + 完全背包问题    //

    这边最小子问题就是十分的典型了，n空间，m件物品。
    本质上是dp[i][v] ，对于前 i 件 物品，放入容量为v 的空间 背包获得的最大价值。
    dp[i][v]=max{dp[i-1][v],dp[i-1][v-w[i]]+c[i]}

    因为每次循环后，i++,利用的是i-1，之前的值就没有用了。
    dp[v]=max(dp[v],dp[v-w[i]]+c[i])
    这边可以简化为一维数组(优化空间复杂度)，必须是逆序(二维没有要求)。为什么
    因为是 v-w[i] 吧....如果是顺序，就会改变可能要用到的数值。

	完全背包问题
	dp[i][v]=max{dp[i-1][v],dp[i][v-w[i]]+c[i]}
    取或者不取，区别在于 第二个 变成dp[i]。
    dp[v]=max{dp[i-1],dp[v-w[i]]+c[i]}
    必须正向枚举??  为什么呢
